# .bashrc / .bash_aliases

# Source global definitions
# if [ -f /etc/bashrc ]; then
#	. /etc/bashrc
# fi

#------------------------------------------------------------
# General Shell / Command line settings.
#------------------------------------------------------------
set -o vi                                # vi mode editing for command line
HISTSIZE=1000                            # in memory history number of lines
HISTFILESIZE=10000                       # in file history number of lines
HISTCONTROL=ignorespace:ignoredups       # no duplicate entries
shopt -s histappend                      # append to history, don't overwrite it
stty -ixon

#------------------------------------------------------------
# Aliases - General Commands and Scripts
#------------------------------------------------------------
alias vi=vim
alias rm='rm -i'
alias ls='ls -G'
alias ll='ls -GFl'
alias ll.='ls -GFdl .*'
alias l.='ls -GFd .*'
alias la='ls -Ga'
alias lla='ls -Gla'

alias grep='grep --color=auto'
alias path='echo $PATH'

#------------------------------------------------------------
# Functions - Git Commands
#------------------------------------------------------------
# For Git branch in prompt.
function git_branch {
   if [ "$1" == "-p" ]
   then
      git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
   else
      git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ \1/'
   fi
}


function paths {
   echo $PATH | awk -F':' 'BEGIN {print "";} {print "**** Total paths: " NF " ****"; for (w=1;w<=NF;w++) print "   " w "\t" $w;} END {print "";}'
}

# Add the line number to piped data
function lineno {
   cat /dev/stdin | awk '{printf "%2i %s\n" , FNR , $0;}'
}

# Show all aliases, functions, scripts customized by me
function menu {
   printf "\n* List of aliases & functions: \n"
   printf "%.0s-" {1..50}; echo
   set | grep "()" | grep -v "=" | grep -v "_" | awk '{print "function " $0;}'
   alias | awk -F'=' '{printf $1; gsub($1"=","",$0); print "\t" $0}'

   printf "\n* List of tools: \n"
   printf "%.0s-" {1..50}; echo
   ls ~/bin/

   printf "\n* List of scripts: \n"
   printf "%.0s-" {1..50}; echo
   #find -P ~/scripts/ \( -iname \*.sh -o -iname \*.py \) -type f -perm +x -print 2> /dev/null
   for i in `find -P ~/scripts/ -type f \( -iname \*.sh -o -iname \*.py \) 2>/dev/null` ; do [ -x $i ] && echo $i ; done
   echo 
}


#------------------------------------------------------------
# Functions - For Prompt handling
#------------------------------------------------------------
# Print the current level inside the shell
function cl {
   set | grep CURRENT_LEVEL | awk -F'=' '{if (NF == 2) {if ("'$1'" == "-n") {print $2;} else {if ($2 == 0) {print "You are in the root shell.";} print "Current Shell Level: " $2;} }}'
}


#------------------------------------------------------------
# Scripts - To Handle Prompt and shell level
#------------------------------------------------------------
# Current shell level to indicate the level inside csh shells.
if test -z $CURRENT_LEVEL
then
   declare -x CURRENT_LEVEL=0
else
   # To handle the shell through telnet or through tmux
   if test -n "$TMUX" -a "$CURRENT_LEVEL" == "0" -a -z "$MYTMUXSHELL"
   then
      declare -x MYTMUXSHELL="$TMUX shell"
   else
      declare -x CURRENT_LEVEL=`expr $CURRENT_LEVEL + 1`
   fi
fi

# Shell Prompt
# Handle normal shell and tmux shell
export TZ=":Asia/Calcutta"
if [ "`cl -n`" -eq 0 -a -z "$MYTMUXSHELL" ]; then
        PS1='\[\033[0m\]\[\033[37m\][ \[\033[32m\]\u@\h \[\033[31m\]($(echo $DOCKER_VM))\[\033[0m\] \[\033[33m\]\w\[\033[37m\] ] \n[ \[\033[34m\]\D{%a %b %d %Y %r %Z}\[\033[37m\]\[\033[31m\]$(git_branch -p)\[\033[00m\] ] \[\033[0m\]'
else
        PS1='\[\033[0m\]\[\033[37m\][ \[\033[32m\]\u@\h \[\033[31m\]($(echo $DOCKER_VM))\[\033[0m\] \[\033[33m\]\w\[\033[37m\] ] \n[ \[\033[36m\]level: \[\033[35m\]`cl -n`\[\033[0m\], \[\033[34m\]\D{%a %b %d %Y %r %Z}\[\033[37m\]\[\033[31m\]$(git_branch -p)\[\033[00m\] ] \[\033[0m\]'
fi


#------------------------------------------------------------
# Functions - Tmux Commands
#------------------------------------------------------------
# To reconnect to detached tmux sessions.
function tx()
{
  if [ ! -z "$TMUX" ]
  then
     echo "Already inside tmux session."
     return 
  fi
  
  # if [[ $(echo "$(tmux -V | cut -d" " -f2) >= 2.1" | tr -d [a-zA-Z] | bc) -eq 1 ]]
  # then
  #   ERROR_MSG="no server running on"
  # else
  #   ERROR_MSG="failed to connect to server: Connection refused"
  # fi

  ERROR_MSG_1="no server running on"
  ERROR_MSG_2="error connecting to"

  dettached_session_count=`tmux ls 2>&1 | grep -v attached | grep -v "${ERROR_MSG_1}" | grep -v "${ERROR_MSG_2}" | wc -l`
  total_session_count=`tmux ls 2>&1 | grep -v "${ERROR_MSG_1}" | grep -v "${ERROR_MSG_2}" | wc -l`

  if test ${total_session_count} -eq 1 && test "$1" = "attach" -o "$1" = "a" -o "$1" = "-a"
  then
     tmux attach
     return
  elif test ${total_session_count} -eq 0 -o ${dettached_session_count} -eq 0
  then
     echo "No existing Session in detached mode."
     tmux
     return
  elif test ${dettached_session_count} -eq 1
  then
     session_no=`tmux ls 2>&1 | grep -v attached | awk -F':' '{print $1;}'`
     echo "One session in detached mode found. Attaching to session_no = ${session_no}"
     tmux attach -t ${session_no}
     return
  elif test ${dettached_session_count} -gt 1
  then
     echo "Following tmux sessions are dettached:"
     tmux ls 2>&1 | grep -v attached | awk -F':' '{print "Session # " $1 "\t -> \t " $0;}'
     echo
     read -p "Please enter the session number to connect to: " session_no
     if test "${session_no}" = ""
     then
        echo "Invalid entry."
        return
     fi
     tmux attach -t ${session_no}
     return
  fi
}

# Exit all the sessions/windows/panes
_tmux_exit_all_sessions() {
	# Store current pane information
    TMUX_CURRENT_PANE=$(tmux display-message -p "#S:#I.#P")

	# Pass exit command to all other panes
    tmux list-sessions                  -F '#{session_name}'        | xargs -I SESS \
    tmux list-windows  -t SESS          -F 'SESS:#{window_index}'   | xargs -I SESS_WIN \
    tmux list-panes    -t SESS_WIN      -F 'SESS_WIN.#{pane_index} #{pane_current_command}' | \
    awk -F' ' '{ if ($1 != "'$TMUX_CURRENT_PANE'" && $2 == "bash") {print $1} }' | sort -r | xargs -I SESS_WIN_PANE \
    tmux send-keys     -t SESS_WIN_PANE 'sleep 0.1; exit' C-m

	# Exit current pane
    exit
}

# START Tmux completion
# This script is in the public domain
# See: http://www.debian-administration.org/articles/317 for how to write more.
_tmux() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    
    opts=" \
    attach-session \
    bind-key \
    break-pane \
    capture-pane \
    choose-client \
    choose-session \
    choose-window \
    clear-history \
    clock-mode \
    command-prompt \
    confirm-before \
    copy-buffer \
    copy-mode \
    delete-buffer \
    detach-client \
    display-message \
    display-panes \
    down-pane \
    find-window \
    has-session \
    if-shell \
    join-pane \
    kill-pane \
    kill-server \
    kill-session \
    kill-window \
    last-window \
    link-window \
    list-buffers \
    list-clients \
    list-commands \
    list-keys \
    list-panes \
    list-sessions \
    list-windows \
    load-buffer \
    lock-client \
    lock-server \
    lock-session \
    move-window \
    new-session \
    new-window \
    next-layout \
    next-window \
    paste-buffer \
    pipe-pane \
    previous-layout \
    previous-window \
    refresh-client \
    rename-session \
    rename-window \
    resize-pane \
    respawn-window \
    rotate-window \
    run-shell \
    save-buffer \
    select-layout \
    select-pane \
    select-prompt \
    select-window \
    send-keys \
    send-prefix \
    server-info \
    set-buffer \
    set-environment \
    set-option \
    set-window-option \
    show-buffer \
    show-environment \
    show-messages \
    show-options \
    show-window-options \
    source-file \
    split-window \
    start-server \
    suspend-client \
    swap-pane \
    swap-window \
    switch-client \
    unbind-key \
    unlink-window \
    up-pane"

    COMPREPLY=($(compgen -W "${opts}" -- ${cur}))  
    return 0

}
complete -F _tmux tmux
# END tmux completion

